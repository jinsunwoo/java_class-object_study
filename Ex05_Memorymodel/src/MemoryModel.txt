
자바 가상머신(JVM)은 운영체제 위에서 동작한다.
- JVM 은 운영체제부터 할당받은 메모리 공간을 기반으로 자바 프로그램을 실행해야 한다.
- JVM 은 운영체제로 부터 할당받은 메모리 공간을 이용해서 자기 자신도 실행을 하고, 자바 프로그램도 실행을 한다.

자바 가상머신의 메모리 모델 => 메모리 공간 활용의 효율성을 높이기 위해 메모리 공간을 세개의 영역으로 구분하였다.
- 메서드 영역 : 메서드의 바이트코드, static 변수
- 스택 영역 : 지역변수, 매개변수
- 힙 영역 : 인스턴스(객체)

* 바이트코드(Bytecode): 바이트코드는 고급언어(java)로 작성된 소스 코드를 가상머신(JVM)이 이해 할 수 있는 중간 코드로 컴파일 한 것을 말한다.
가상머신은 이 바이트코드를 각각의 하드웨어 아키텍처에 맞는 기계어로 다시 컴파일 한다. 바이트코드는 어셈블리어에 가까운 형태를 띄고 있다. 

메서드 영역 # 이 영역에 저장된 내용은 프로그램 시작 전에 로드되고 프로그램 종료 시 소멸된다. 
- 메서드의 자바 바이트코드는 JVM 이 구분하는 메모리 공간 중에서 메서드 영역에 저장된다.
- static 으로 선언된 클래스 변수도 메서드 영역에 저장된다. 

스택 영역 # 이 영역에 저장된 변수는 해당 변수가 선언된 메서드 종료 시 소멸된다.
- 매개변수, 지역변수가 할당되는 메모리 공간
- 프로그램이 실행되는 도중에 임시로 할당되었다가 바로 이어서 소멸되는 특징이 있는 변수가 할당된다.

스택의 흐름
- 지역변수는 스택에 할당된다.
- 스택에 할당된 지역변수는 해당 메서드를 빠져 나가면 소멸된다.   
- 할당 및 소멸의 특성상 그 형태가 장작을 쌓는 것과 유사해서 스택이라 이름 지어 졌다.
- 할당 및 소멸의 특성산 메서드 별 스택이 구분이 된다. 

힙 영역 # 가비지 컬렉션의 대상이 되는 영역이다.
- 인스턴스(객체)가 생성되는 메모리 공간
- JVM에 의한 메모리 공간의 정리(Garbage Collection)이 이루어지는 공간
- 할당은 프로그래머가 소멸은 JVM이 처리한다
- 참조변수에 의한 참조가 전혀 이뤄지지 않는(참조가 끊긴 ex: String str1 = new String("스트링") 이었다가 str1 = null 처리 되었다던가) 인스턴스가 소멸의 대상이 된다. 
  따라서 JVM은 인스턴스의 참조관계를 확인하고(참조 관계가 끊겼다면) 소멸할 대상을 선정한다.
  # 참조 관계가 끊어진 인스턴스는 접근이 불가하기 때문에 가비지컬렉션의 대상이 된다.
 
Garbage Collection
- GC는 한 번도 발생하지 않을 수 있다.
- GC가 발생하면, 소멸의 대상이 되는 인스턴스는 결정되지만 이것이 실제 소멸로 바로 이어지지는 않는다.
- 인스턴스의 실제 소멸로 이어지지 않은 상태에서 프로그램이 종료 될 수도 있다. 종료가 되면 어차피 인스턴스는 소멸 된다.

가비지컬렉션 command:
System.gc(); // Garbage collection 을 명령함
System.runFinalization(); // GC에 의해서 소멸이 결정된 인스턴스를 즉시 소멸. 
 
  
  
   


   

                  